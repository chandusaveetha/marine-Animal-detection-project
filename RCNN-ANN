import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models

# Load pre-trained R-CNN model
rcnn_model = tf.saved_model.load('path/to/rcnn/model')

# Define a basic Artificial Neural Network (ANN) model
def create_ann_model():
    model = models.Sequential()
    model.add(layers.Flatten(input_shape=(224, 224, 3)))
    model.add(layers.Dense(128, activation='relu'))
    model.add(layers.Dense(num_classes, activation='softmax'))
    return model

# Replace 'path/to/ann/model' with the actual path to your ANN model
ann_model = create_ann_model()
ann_model.load_weights('path/to/ann/model')

# Load an image for testing (replace 'path/to/image.jpg' with your image path)
image_path = 'path/to/image.jpg'
image = cv2.imread(image_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image = cv2.resize(image, (224, 224))

# Preprocess the image for R-CNN
input_tensor = tf.convert_to_tensor(image, dtype=tf.uint8)
input_tensor = tf.expand_dims(input_tensor, 0)
detections = rcnn_model(input_tensor)

#Recurrent neural network
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, LSTM, Dense, Flatten
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.optimizers import Adam

# Define R-CNN model
def create_rcnn_model(input_shape):
    base_model = ResNet50(weights='imagenet', include_top=False, input_shape=input_shape)
    model = Sequential([
        base_model,
        Flatten(),
        Dense(256, activation='relu'),
        Dense(num_classes, activation='softmax')
    ])
    return model

# Define RNN model
def create_rnn_model(sequence_length, feature_dim):
    model = Sequential([
        LSTM(128, input_shape=(sequence_length, feature_dim)),
        Dense(num_classes, activation='softmax')
    ])
    return model

# Compile models
rcnn_model = create_rcnn_model((224, 224, 3))
rcnn_model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

rnn_model = create_rnn_model(sequence_length, feature_dim)
rnn_model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

# Train models (Assuming you have prepared training data)
# rcnn_model.fit(training_data_rcnn, training_labels_rcnn, epochs=num_epochs)
# rnn_model.fit(training_data_rnn, training_labels_rnn, epochs=num_epochs)

#yolo alogrithm:
import cv2
import numpy as np
import tensorflow as tf

# Load pre-trained R-CNN model
rcnn_model = tf.keras.applications.InceptionV3(weights='imagenet', include_top=True)
rcnn_model_label = 'InceptionV3'

# Load pre-trained YOLO model
yolo_net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
yolo_classes = open("coco.names").read().strip().split('\n')
yolo_net_label = 'YOLO'

# Function for R-CNN detection
def rcnn_detection(image_path):
    img = tf.keras.preprocessing.image.load_img(image_path, target_size=(299, 299))
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = tf.keras.applications.inception_v3.preprocess_input(img_array)
    img_array = np.expand_dims(img_array, axis=0)

    predictions = rcnn_model.predict(img_array)
    label = tf.keras.applications.inception_v3.decode_predictions(predictions)[0][0][1]

    return label

# Function for YOLO detection
def yolo_detection(image_path):
    image = cv2.imread(image_path)
    height, width = image.shape[:2]

    blob = cv2.dnn.blobFromImage(image, 1/255.0, (416, 416), swapRB=True, crop=False)
    yolo_net.setInput(blob)

    output_layer_names = yolo_net.getUnconnectedOutLayersNames()
    layer_outputs = yolo_net.forward(output_layer_names)

    boxes, confidences, class_ids = [], [], []

    for output in layer_outputs:
        for detection in output:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]

            if confidence > 0.5:
                center_x, center_y, w, h = (detection[0:4] * np.array([width, height, width, height])).astype('int')
                x, y = int(center_x - w/2), int(center_y - h/2)

                boxes.append([x, y, int(w), int(h)])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    for i in range(len(boxes)):
        if i in indexes:
            label = yolo_classes[class_ids[i]]
            confidence = confidences[i]

            cv2.rectangle(image, (boxes[i][0], boxes[i][1]), (boxes[i][0] + boxes[i][2], boxes[i][1] + boxes[i][3]), (0, 255, 0), 2)
            cv2.putText(image, f'{label} {confidence:.2f}', (boxes[i][0], boxes[i][1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    cv2.imshow('YOLO Detection', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

!pip install tensorflow opencv-python

import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models

def create_cnn_model():
    model = models.Sequential()
    model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))
    model.add(layers.MaxPooling2D((2, 2)))
    model.add(layers.Conv2D(64, (3, 3), activation='relu'))
    model.add(layers.MaxPooling2D((2, 2)))
    model.add(layers.Conv2D(128, (3, 3), activation='relu'))
    model.add(layers.MaxPooling2D((2, 2)))
    model.add(layers.Flatten())
    model.add(layers.Dense(64, activation='relu'))
    model.add(layers.Dense(1, activation='sigmoid'))
    return model

rcnn_model = tf.keras.applications.MaskRCNN(weights='coco', include_top=False)

def preprocess_image(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (224, 224))
    img = img / 255.0
    return img

def cnn_object_detection(image_path):
    cnn_model = create_cnn_model()
    cnn_model.load_weights('path_to_cnn_weights.h5')
    img = preprocess_image(image_path)
    img = np.expand_dims(img, axis=0)
    prediction = cnn_model.predict(img)
    return prediction

def rcnn_object_detection(image_path):
    img = preprocess_image(image_path)
    img = np.expand_dims(img, axis=0)
    prediction = rcnn_model.predict(img)
    return prediction

image_path = 'path_to_image.jpg'
cnn_result = cnn_object_detection(image_path)
rcnn_result = rcnn_object_detection(image_path)

print("CNN Result:", cnn_result)
print("R-CNN Result:", rcnn_result)






